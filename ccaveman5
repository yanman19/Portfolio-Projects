import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def calculate_strategy_metrics_with_seaborn(df, product, lot_size, start_date, end_date):
    """
    Calculates PNL, Sharpe Ratio, Max Drawdown, and Value at Risk for a given product and lot size over a defined period.
    Plots the cumulative PNL using Seaborn and returns the figure.
    """
    # Convert column names to lowercase
    df.columns = df.columns.str.lower()

    # Convert product name to lowercase to match the column names
    product = product.lower()

    # Filter the dataframe to the desired date range
    df['date'] = pd.to_datetime(df['date'])
    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)].set_index('date')

    # Calculate the number of business days in the filtered data
    business_days = np.busday_count(df.index.min().date(), df.index.max().date())

    # Calculate daily price change for the selected product
    price_change = df[product].diff().dropna()

    # Define the strategy: lot_size long if price change > 0, lot_size short if price change < 0
    positions = np.where(price_change > 0, lot_size, -lot_size)

    # Calculate daily PNL
    daily_pnl = positions * price_change

    # Create a new dataframe to show the logic
    result_df = price_change.to_frame(name='price_change')
    result_df['price'] = df[product]  # Include product prices
    result_df['position'] = positions
    result_df['daily_pnl'] = daily_pnl
    result_df['cumulative_pnl'] = daily_pnl.cumsum()

    # Calculate Sharpe Ratio using actual business days
    sharpe_ratio = (daily_pnl.mean() / daily_pnl.std()) * np.sqrt(business_days)

    # Calculate Max Drawdown
    rolling_max = result_df['cumulative_pnl'].cummax()
    drawdown = result_df['cumulative_pnl'] - rolling_max
    max_drawdown = drawdown.min()

    # Calculate Value at Risk (VaR) at 95% confidence level
    var_95 = np.percentile(daily_pnl, 5)

    # Plot cumulative PNL using Seaborn
    sns.set(style="whitegrid")
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.lineplot(data=result_df, x=result_df.index, y='cumulative_pnl', ax=ax)
    ax.set_title(f'Cumulative PNL for {product.upper()}', fontsize=16)
    ax.set_xlabel('Date', fontsize=12)
    ax.set_ylabel('Cumulative PNL', fontsize=12)

    # Show the plot
    plt.tight_layout()

    # Return the results as a dictionary, result dataframe, and figure
    return {
        'Sharpe Ratio': sharpe_ratio,
        'Max Drawdown': max_drawdown,
        'PNL (Total)': result_df['cumulative_pnl'].iloc[-1],
        'Value at Risk (95%)': var_95
    }, result_df, fig

# Example usage
# Replace this with your actual dataframe
data = {
    'date': pd.date_range(start='2023-01-01', periods=100, freq='B'),
    'rggi': np.random.normal(100, 2, 100),
    'cca': np.random.normal(150, 3, 100)
}
df = pd.DataFrame(data)

# Call the function
results, result_df, fig = calculate_strategy_metrics_with_seaborn(
    df, product='rggi', lot_size=100, start_date='2023-01-01', end_date='2023-12-31'
)

# Print the results
for metric, value in results.items():
    print(f"{metric}: {value}")

# Show the detailed dataframe
print(result_df)

# Display the figure
plt.show()