import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import dash_table
import pandas as pd

# Sample data for Cash Performance and Predictions DataFrames
cash_performance = pd.DataFrame({
    'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
    'Price': [50, 55, 60]
})

predictions = pd.DataFrame({
    'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],
    'Predicted Price': [52, 54, 61]
})

# Initialize the app
app = dash.Dash(__name__)

# Define the layout
app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.Div(id='page-content')
])

# Define YANUS layout (previously homepage) with links to NEPOOL, NYE, and NYW pages
yanus_layout = html.Div([
    html.H1('YANUS'),
    dcc.Link('Go to NEPOOL', href='/nepool'),
    html.Br(),  # Line break
    dcc.Link('Go to NYE', href='/nye'),
    html.Br(),  # Line break
    dcc.Link('Go to NYW', href='/nyw')
])

# Define NEPOOL page layout with two interactive tables
nepool_layout = html.Div([
    html.H1('NEPOOL Data'),
    html.H2('Cash Performance'),
    dash_table.DataTable(
        id='cash-performance-table',
        columns=[{"name": i, "id": i} for i in cash_performance.columns],
        data=cash_performance.to_dict('records'),
        sort_action="native",  # Enable sorting on columns
        style_table={'overflowX': 'auto'},  # Allow horizontal scroll if needed
        style_data={
            'whiteSpace': 'normal',
            'height': 'auto'
        },
        style_cell={
            'textAlign': 'left',
            'minWidth': '150px', 'width': '150px', 'maxWidth': '150px',
        }
    ),
    html.H2('Predictions'),
    dash_table.DataTable(
        id='predictions-table',
        columns=[{"name": i, "id": i} for i in predictions.columns],
        data=predictions.to_dict('records'),
        sort_action="native",  # Enable sorting on columns
        style_table={'overflowX': 'auto'},  # Allow horizontal scroll if needed
        style_data={
            'whiteSpace': 'normal',
            'height': 'auto'
        },
        style_cell={
            'textAlign': 'left',
            'minWidth': '150px', 'width': '150px', 'maxWidth': '150px',
        }
    ),
    dcc.Link('Go back to YANUS', href='/')
])

# Callback to update the page content
@app.callback(Output('page-content', 'children'),
              [Input('url', 'pathname')])
def display_page(pathname):
    if pathname == '/nepool':
        return nepool_layout
    elif pathname == '/nye':
        return html.Div([html.H1("NYE Page Content"), dcc.Link('Go back to YANUS', href='/')])
    elif pathname == '/nyw':
        return html.Div([html.H1("NYW Page Content"), dcc.Link('Go back to YANUS', href='/')])
    else:
        return yanus_layout

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True, port=8051)
