import pandas as pd
from prophet import Prophet
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt

def convert_year(df, year):
    df['Datetime1'] = df['Datetime1'].apply(lambda x: x.replace(year=year))
    return df

def prophet_forecast1(dataframe, target_col, datetime_col, prediction_df):
    # Prepare the data for Prophet
    df = dataframe.rename(columns={datetime_col: 'ds', target_col: 'y'})
    
    # Check if columns exist in the dataframe
    if 'ds' not in df.columns or 'y' not in df.columns:
        raise ValueError(f"Dataframe columns do not contain the expected 'ds' or 'y' after renaming: {df.columns}")
    
    # Select predictors
    predictors = [col for col in df.columns if col not in ['ds', 'y']]
    
    # Initialize the Prophet model
    model = Prophet()
    for predictor in predictors:
        model.add_regressor(predictor)
    
    # Fit the Prophet model with additional regressors
    model.fit(df[['ds', 'y'] + predictors])
    
    # Make predictions on the prediction_df
    prediction_future = prediction_df.rename(columns={datetime_col: 'ds'})
    prediction_forecast = model.predict(prediction_future[['ds'] + predictors])
    
    # Combine the prediction_df with the predictions
    prediction_df['yhat'] = prediction_forecast['yhat'].values
    
    return prediction_df, predictors

def run_forecast_on_dict(allData, dataframes, input_year):
    # Convert years in all dataframes
    for key in dataframes:
        dataframes[key] = convert_year(dataframes[key], input_year)
    
    # Create dictionaries for outputs
    test_dfs = {}
    plots = {}
    prediction_dfs = {}
    predictors_dict = {}
    
    for key in dataframes:
        target_col = "DALoad"
        datetime_col = "Datetime1"
        prediction_df = dataframes[key].copy()
        
        # Ensure the required columns exist in the dataframe
        if target_col not in allData.columns or datetime_col not in allData.columns:
            raise ValueError(f"Training dataframe does not contain required columns: {target_col} or {datetime_col}")
        if target_col not in prediction_df.columns or datetime_col not in prediction_df.columns:
            raise ValueError(f"Prediction dataframe '{key}' does not contain required columns: {target_col} or {datetime_col}")
        
        print(f"Processing dataframe: {key}")
        
        # Run Prophet forecast
        prediction_df, predictors = prophet_forecast1(allData, target_col, datetime_col, prediction_df)
        
        # Calculate error metrics
        mse = mean_squared_error(dataframes[key][target_col], prediction_df['yhat'])
        mae = mean_absolute_error(dataframes[key][target_col], prediction_df['yhat'])
        
        # Plot the results
        plt.figure(figsize=(10, 6))
        plt.plot(dataframes[key][datetime_col], dataframes[key][target_col], label='Realized Values')
        plt.plot(prediction_df[datetime_col], prediction_df['yhat'], label='Predicted Values')
        plt.legend()
        plt.title(f'Realized vs Predicted Values for {target_col}\nMSE: {mse:.2f}, MAE: {mae:.2f}')
        plt.xlabel('Date')
        plt.ylabel(target_col)
        plt.grid()
        plot = plt.gcf()  # Get current figure
        plt.show()
        
        # Store results in dictionaries
        test_dfs[key] = dataframes[key]
        plots[key] = plot
        prediction_dfs[key] = prediction_df
        predictors_dict[key] = predictors
    
    return test_dfs, plots, prediction_dfs, predictors_dict

# Usage
# Assuming `allData` is your training dataframe and `dataframes` is the dictionary of dataframes you want to test on.
# allData = <your training dataframe>
# dataframes = <your dictionary of test dataframes>
# input_year = <desired year for conversion>

# test_dfs, plots, prediction_dfs, predictors = run_forecast_on_dict(allData, dataframes, input_year)