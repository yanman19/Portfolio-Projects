def apply_split_regression(train_df, test_dict, inflection_point_x, x_var, target_var, input_year):
    # Separate the training data based on the inflection point
    train_df_1 = train_df[train_df[x_var] <= inflection_point_x]
    train_df_2 = train_df[train_df[x_var] > inflection_point_x]

    # Debug: Print shapes to verify the split
    print(f"train_df_1 shape: {train_df_1.shape}, train_df_2 shape: {train_df_2.shape}")
    
    # Check if either of the dataframes is empty
    if train_df_1.empty or train_df_2.empty:
        raise ValueError("One of the training dataframes is empty after splitting. Adjust the inflection point or check data values.")

    # Initialize and train the first regression model
    model_1 = LinearRegression()
    model_1.fit(train_df_1[[x_var]], train_df_1[target_var])
    
    # Initialize and train the second regression model
    model_2 = LinearRegression()
    model_2.fit(train_df_2[[x_var]], train_df_2[target_var])
    
    # Create a copy of test_dict to store predictions
    result_dict = {}
    
    # Apply the models to each dataframe in test_dict
    for key, df in test_dict.items():
        df = df.copy()  # To avoid modifying the original test_dict dataframes

        # Update the dataframe with the input year
        df = update_year(df, input_year)
        
        # Create a copy of the target variable column to store predictions
        df[target_var] = 0
        
        # Apply model_1 to rows where x_var <= inflection_point_x
        mask_1 = df[x_var] <= inflection_point_x
        print(f"{key} - Rows using model_1: {mask_1.sum()}")  # Debug: Check number of rows for model_1

        if mask_1.sum() > 0:  # Only predict if there are rows that match the condition
            df.loc[mask_1, target_var] = model_1.predict(df.loc[mask_1, [x_var]])
        
        # Apply model_2 to rows where x_var > inflection_point_x
        mask_2 = df[x_var] > inflection_point_x
        print(f"{key} - Rows using model_2: {mask_2.sum()}")  # Debug: Check number of rows for model_2

        if mask_2.sum() > 0:  # Only predict if there are rows that match the condition
            df.loc[mask_2, target_var] = model_2.predict(df.loc[mask_2, [x_var]])
        
       