import pandas as pd
import numpy as np
from datetime import datetime
import panel as pn

pn.extension('tabulator')

def create_seasonal_pivot(df, value_column):
    df = df.copy()
    df['MARKETDATE'] = pd.to_datetime(df['MARKETDATE'])
    df['Year'] = df['MARKETDATE'].dt.year
    df['Month'] = df['MARKETDATE'].dt.month
    df['MonthCode'] = df['Month'].map({
        1: 'F', 2: 'G', 3: 'H', 4: 'J', 5: 'K', 6: 'M',
        7: 'N', 8: 'Q', 9: 'U', 10: 'V', 11: 'X', 12: 'Z'
    })

    pivot = df.pivot_table(index='Year', columns='MonthCode', values=value_column, aggfunc='mean')

    fg = ['F', 'G']
    hj = ['H', 'J']
    nq = ['N', 'Q']
    q4 = ['V', 'X', 'Z']

    pivot['FG'] = pivot[fg].mean(axis=1)
    pivot['HJ'] = pivot[hj].mean(axis=1)
    pivot['NQ'] = pivot[nq].mean(axis=1)
    pivot['Q4'] = pivot[q4].mean(axis=1)
    pivot['CAL'] = pivot[[c for c in pivot.columns if c in list('FGHJKMNQUVXZ')]].mean(axis=1)

    final_cols = [c for c in list('FGHJKMNQUVXZ') if c in pivot.columns] + ['FG', 'HJ', 'NQ', 'Q4', 'CAL']
    pivot = pivot[final_cols]
    pivot.columns.name = None
    pivot = pivot.applymap(lambda x: f"{x:.1f}" if pd.notnull(x) else "")

    # Enhanced color palette with better contrast and more modern colors
    def color_cells(val, row_year, col):
        if row_year == datetime.now().year:
            return 'background-color: #E8EAF6; font-weight: 600;'  # Indigo 50 - current year
        if col in ['FG', 'F', 'G']:
            return 'background-color: #E1F5FE;'  # Light Blue 50
        if col in ['HJ', 'H', 'J']:
            return 'background-color: #E8F5E9;'  # Green 50
        if col in ['NQ', 'N', 'Q']:
            return 'background-color: #FFF3E0;'  # Orange 50
        if col in ['Q4', 'V', 'X', 'Z']:
            return 'background-color: #FFFDE7;'  # Yellow 50
        if col == 'CAL':
            return 'background-color: #F3E5F5; font-weight: 600;'  # Purple 50 - for CAL
        return ''

    def style_func(row):
        year = row.name
        return [color_cells(row[col], year, col) for col in row.index]

    styled = pivot.style.apply(style_func, axis=1)
    styled.set_table_styles([
        {'selector': 'th, td', 'props': [
            ('text-align', 'center'),
            ('min-width', '40px'),
            ('width', 'auto'),
            ('max-width', '65px'),
            ('border', '1px solid #E0E0E0'),  # Lighter border
            ('padding', '4px 2px'),
            ('font-family', 'Roboto, Arial, sans-serif'),  # Modern font
            ('font-size', '11px'),
            ('white-space', 'nowrap')
        ]},
        {'selector': 'table', 'props': [
            ('border-collapse', 'collapse'),
            ('margin', '0 auto'),
            ('width', '100%'),
            ('table-layout', 'auto'),
            ('box-shadow', '0 2px 4px rgba(0,0,0,0.08)')  # Subtle shadow
        ]},
        {'selector': 'th', 'props': [
            ('font-weight', 'bold'),
            ('font-size', '11px'),
            ('background-color', '#F5F5F5'),  # Grey background for headers
            ('color', '#424242'),  # Darker text for headers
            ('border-bottom', '2px solid #9E9E9E')  # Stronger bottom border
        ]},
        {'selector': 'tr:hover', 'props': [
            ('background-color', 'rgba(0,0,0,0.02)')  # Subtle row hover effect
        ]}
    ])
    return styled

def create_tab_content(df, all_columns):
    # Create dropdown with modern styling
    trade_types = ['SPARK', 'FP', 'HR', 'GASBASIS', 'SPREAD']
    dropdown = pn.widgets.Select(
        name='Select Trade Type:', 
        options=trade_types,
        width=200,
        margin=(0, 0, 20, 0),
        css_classes=['modern-dropdown']
    )
    
    # Create a centered container for the dropdown with shadow effect
    dropdown_container = pn.Row(
        pn.layout.HSpacer(),
        dropdown,
        pn.layout.HSpacer(),
        css_classes=['filter-container'],
        width=1300
    )

    grid_area = pn.Column(sizing_mode='fixed', width=1300, css_classes=['grid-container'])

    def update_table(event=None):
        keyword = dropdown.value
        matching_cols = [col for col in all_columns if keyword in col]
        grid_area.clear()
        
        # Process tables two at a time
        for i in range(0, len(matching_cols), 2):
            # Create row to hold two tables
            row = pn.Row(sizing_mode='fixed', width=1300, height=380, css_classes=['table-row'])
            
            # First table with enhanced styling
            col = matching_cols[i]
            styled = create_seasonal_pivot(df, col)
            title1 = pn.pane.Markdown(
                f"<div class='table-title'>{col}</div>",
                css_classes=['title-pane']
            )
            table1 = pn.pane.HTML(styled.render(), width=580, height=320, css_classes=['table-pane'])
            table_block1 = pn.Column(
                title1, 
                table1, 
                width=600,
                margin=(0, 20, 0, 0),
                css_classes=['table-container']
            )
            row.append(table_block1)
            
            # Second table with enhanced styling
            if i + 1 < len(matching_cols):
                col = matching_cols[i + 1]
                styled = create_seasonal_pivot(df, col)
                title2 = pn.pane.Markdown(
                    f"<div class='table-title'>{col}</div>",
                    css_classes=['title-pane']
                )
                table2 = pn.pane.HTML(styled.render(), width=580, height=320, css_classes=['table-pane'])
                table_block2 = pn.Column(
                    title2, 
                    table2, 
                    width=600,
                    margin=(0, 0, 0, 20),
                    css_classes=['table-container']
                )
                row.append(table_block2)
            
            # Add row to grid
            grid_area.append(row)
            # Smaller spacer between rows
            grid_area.append(pn.Spacer(height=30))

    # Add modern CSS with better spacing, shadows, and responsive design
    pn.config.raw_css.append("""
    /* Modern styling for the entire dashboard */
    body {
        font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
        background-color: #F9FAFB;
        color: #333333;
    }
    
    /* Table container with shadow and rounded corners */
    .table-container {
        border-radius: 8px;
        border: none;
        padding: 15px;
        background-color: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        overflow: hidden;
        transition: all 0.2s ease-in-out;
    }
    
    .table-container:hover {
        box-shadow: 0 6px 16px rgba(0,0,0,0.12);
        transform: translateY(-2px);
    }
    
    /* Table title styling */
    .table-title {
        text-align: center;
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 10px;
        color: #1A237E;
        padding-bottom: 8px;
        border-bottom: 2px solid #E8EAF6;
    }
    
    /* Modern dropdown styling */
    .modern-dropdown {
        display: flex;
        justify-content: center;
    }
    
    .modern-dropdown select {
        border-radius: 4px;
        border: 1px solid #BDBDBD;
        padding: 8px 12px;
        font-size: 14px;
        background-color: white;
        transition: all 0.2s;
    }
    
    .modern-dropdown select:hover {
        border-color: #9E9E9E;
    }
    
    .modern-dropdown select:focus {
        border-color: #3F51B5;
        box-shadow: 0 0 0 2px rgba(63, 81, 181, 0.2);
        outline: none;
    }
    
    /* Filter container with subtle shadow */
    .filter-container {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        display: flex;
        justify-content: center;
        width: 100% !important;
        text-align: center;
    }
    
    /* Fix dropdown label alignment */
    .bk-input-group {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    /* Center the bk label with modern styling */
    label.bk-input-label {
        text-align: center;
        width: 100%;
        margin-bottom: 8px;
        font-weight: 500;
        color: #424242;
        font-size: 14px;
    }
    
    /* Grid container for proper centering */
    .grid-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    /* Table row for proper centering */
    .table-row {
        display: flex;
        justify-content: center;
        width: 100%;
    }
    
    /* Custom scrollbar for modern browsers */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #F5F5F5;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #BDBDBD;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #9E9E9E;
    }
    """)
    
    dropdown.param.watch(update_table, 'value')
    update_table()

    return pn.Column(
        dropdown_container,
        pn.Spacer(height=10),
        grid_area, 
        width=1300,
        align="center",
        css_classes=['content-container'],
        margin=(0, 0, 0, 0)
    )

def generate_yanus_tabs(data_dict, column_list):
    tabs = []
    for label, df in data_dict.items():
        tabs.append((label.upper(), create_tab_content(df, column_list)))

    # Modern, minimalist YANUS title with Google colors and animation
    header_html = """
    <div class="yanus-header">
        <div class="yanus-title">
            <span class="y">Y</span>
            <span class="a">A</span>
            <span class="n">N</span>
            <span class="u">U</span>
            <span class="s">S</span>
        </div>
        <div class="subtitle">Your Advanced Navigation Utility System</div>
    </div>
    """

    # Enhanced CSS for modern design, animations, and better spacing
    pn.config.raw_css.append("""
    /* Modern styling for the entire dashboard */
    body {
        overflow-x: hidden;
        text-align: center;
        background-color: #F9FAFB;
        margin: 0;
        padding: 0;
    }
    
    /* YANUS Header styling */
    .yanus-header {
        text-align: center;
        padding: 30px 0;
        margin-bottom: 20px;
        background: linear-gradient(135deg, #FAFAFA 0%, #F5F5F5 100%);
        border-bottom: 1px solid #EEEEEE;
        box-shadow: 0 2px 12px rgba(0,0,0,0.03);
    }
    
    /* YANUS Title with Google colors and animation */
    .yanus-title {
        font-size: 56px;
        font-family: 'Google Sans', 'Roboto', Arial, sans-serif;
        font-weight: 700;
        letter-spacing: 2px;
        margin-bottom: 5px;
    }
    
    .yanus-title span {
        display: inline-block;
        transition: transform 0.3s ease;
    }
    
    .yanus-title span:hover {
        transform: translateY(-5px);
    }
    
    .y { color: #4285F4; } /* Google Blue */
    .a { color: #DB4437; } /* Google Red */
    .n { color: #F4B400; } /* Google Yellow */
    .u { color: #0F9D58; } /* Google Green */
    .s { color: #4285F4; } /* Google Blue */
    
    /* Subtitle styling */
    .subtitle {
        font-size: 16px;
        color: #757575;
        font-family: 'Roboto', Arial, sans-serif;
        font-weight: 300;
        letter-spacing: 1px;
        margin-top: 8px;
    }
    
    /* Panel container styling */
    .panel-container {
        max-width: 1300px;
        margin: 0 auto;
        background-color: transparent;
    }
    
    /* Tab styling */
    .bk-header.bk-above {
        justify-content: center !important;
        display: flex !important;
        width: 100% !important;
        text-align: center !important;
        margin: 0 auto !important;
        border-bottom: 1px solid #EEEEEE;
    }
    
    /* Tab row styling */
    .bk-header .bk-tab-row {
        display: flex;
        justify-content: center !important;
        width: 100% !important;
        padding: 0 20px;
    }
    
    /* Individual tab styling */
    .bk-tab {
        padding: 12px 24px !important;
        font-weight: 500 !important;
        font-size: 14px !important;
        color: #616161 !important;
        border: none !important;
        margin: 0 5px !important;
        border-radius: 4px 4px 0 0 !important;
        transition: all 0.2s ease !important;
    }
    
    /* Tab hover effect */
    .bk-tab:hover {
        background-color: rgba(0,0,0,0.03) !important;
        color: #424242 !important;
    }
    
    /* Active tab styling */
    .bk-tab.bk-active {
        background-color: white !important;
        color: #1A237E !important;
        border-bottom: 3px solid #4285F4 !important;
        font-weight: 600 !important;
    }
    
    /* Center the tab content */
    .panel-tab {
        display: flex !important;
        flex-direction: column !important;
        align-items: center !important;
        justify-content: flex-start !important;
        margin: 0 auto !important;
        padding: 20px 0 !important;
    }
    
    /* Responsive adjustments */
    @media (max-width: 1320px) {
        .panel-container {
            width: 100% !important;
            padding: 0 10px;
        }
    }
    """)
    
    # Header container
    tabs_container = pn.Column(
        pn.pane.HTML(header_html, css_classes=['title-container']),
        css_classes=['header-container'],
        width=1300,
        align='center'
    )
    
    # Tabs panel with modern styling
    tabs_panel = pn.Tabs(
        *tabs, 
        tabs_location='above',
        sizing_mode='fixed',
        width=1300,
        css_classes=['modern-tabs']
    )
    
    # Main content container
    content = pn.Column(
        tabs_container,
        tabs_panel,
        align="center",
        width=1300,
        sizing_mode='fixed',
        css_classes=['panel-container']
    )
    
    # Center the entire dashboard
    return pn.Row(
        pn.layout.HSpacer(),
        content,
        pn.layout.HSpacer(),
        sizing_mode="stretch_width",
        css_classes=['main-container']
    )

# Load your data
peak_df = pd.read_csv("peak.csv")
offpeak_df = pd.read_csv("offpeak.csv")
nights_df = pd.read_csv("nights.csv")
atc_df = pd.read_csv("atc.csv")

# Column names to include - you can customize this list
all_columns = ['SPARK1', 'SPARK2', 'FP1', 'HR1', 'GASBASIS1', 'SPREAD1', 'SPREAD2']

# Tab mappings
dataframes = {
    'Peak': peak_df,
    'Offpeak': offpeak_df,
    'Nights': nights_df,
    'ATC': atc_df
}

# Create dashboard with enhanced visuals
multi_tab_dashboard = generate_yanus_tabs(dataframes, all_columns)
multi_tab_dashboard.save("YANUS_Enhanced.html", embed=True)

print("Enhanced YANUS dashboard saved as 'YANUS_Enhanced.html'")