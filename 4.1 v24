import pandas as pd
import numpy as np
from datetime import datetime
import panel as pn

pn.extension('tabulator')

def create_seasonal_pivot(df, value_column):
    df = df.copy()
    df['MARKETDATE'] = pd.to_datetime(df['MARKETDATE'])
    df['Year'] = df['MARKETDATE'].dt.year
    df['Month'] = df['MARKETDATE'].dt.month
    df['MonthCode'] = df['MARKETDATE'].dt.month.map({
        1: 'F', 2: 'G', 3: 'H', 4: 'J', 5: 'K', 6: 'M',
        7: 'N', 8: 'Q', 9: 'U', 10: 'V', 11: 'X', 12: 'Z'
    })

    pivot = df.pivot_table(index='Year', columns='MonthCode', values=value_column, aggfunc='mean')

    fg_months = ['F', 'G']
    nq_months = ['N', 'Q']
    jv_months = ['J', 'K', 'M', 'U', 'V']

    pivot['FG'] = pivot[fg_months].mean(axis=1)
    pivot['NQ'] = pivot[nq_months].mean(axis=1)
    pivot['JV'] = pivot[jv_months].mean(axis=1)
    pivot['CAL'] = pivot[[c for c in pivot.columns if c in list('FGHJKMNQUVXZ')]].mean(axis=1)

    def color_cells(val, row_year, col):
        if row_year == datetime.now().year:
            return 'background-color: #E6E6FA'
        if col == 'FG':
            return 'background-color: #ADD8E6'
        if col == 'NQ':
            return 'background-color: #FFDAB9'
        if col in ['J', 'K', 'M', 'U', 'V']:
            return 'background-color: #90EE90'
        return ''

    def style_func(row):
        year = row.name
        return [color_cells(row[col], year, col) for col in row.index]

    styled_pivot = pivot.style.apply(style_func, axis=1)
    return styled_pivot

def generate_yanus_dashboard(df, column_list):
    components = []

    header_html = """
    <div style="text-align: center; font-size: 48px; font-family: Arial, sans-serif; margin-top: 20px; margin-bottom: 30px;">
        <span style="color: #4285F4;">Y</span>
        <span style="color: #DB4437;">A</span>
        <span style="color: #F4B400;">N</span>
        <span style="color: #0F9D58;">U</span>
        <span style="color: #4285F4;">S</span>
    </div>
    """
    components.append(pn.pane.HTML(header_html))

    for col in column_list:
        styled_pivot = create_seasonal_pivot(df, col)
        title = pn.pane.Markdown(f"## Seasonal Pivot for `{col}`")
        table = pn.pane.HTML(styled_pivot.to_html(), width=1200, height=400)
        components.extend([title, table, pn.Spacer(height=30)])

    return pn.Column(*components, width=1250)