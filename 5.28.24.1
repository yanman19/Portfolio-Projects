import pandas as pd

def create_timeseries(retire_df, present_df, future_df):
    # Generate a date range from 2000-01 to 2040-12
    date_range = pd.date_range(start='2000-01-01', end='2040-12-31', freq='MS')

    # Initialize an empty DataFrame to hold the timeseries
    timeseries = pd.DataFrame(index=date_range)

    # Add initial values from the present DataFrame
    for fuel in present_df['Fuel'].unique():
        fuel_present = present_df[present_df['Fuel'] == fuel]
        size = fuel_present['Size MW'].sum()
        timeseries[fuel] = size
    
    # Subtract retired systems based on retire date
    for _, row in retire_df.iterrows():
        retire_date = pd.to_datetime(row['Retire date'])
        fuel = row['Fuel']
        size = row['Size MW']
        if fuel not in timeseries.columns:
            timeseries[fuel] = 0
        timeseries.loc[retire_date:, fuel] -= size

    # Add future systems based on start date and subtract based on end date
    for _, row in future_df.iterrows():
        start_date = pd.to_datetime(row['Start date'])
        fuel = row['Fuel']
        size = row['Size MW']
        if fuel not in timeseries.columns:
            timeseries[fuel] = 0
        timeseries.loc[start_date:, fuel] += size

    # Forward fill to ensure all months have the correct cumulative values
    timeseries = timeseries.cumsum().fillna(method='ffill')

    return timeseries

# Example usage:
# retire_df = pd.DataFrame({'Name': [...], 'Retire date': [...], 'Fuel': [...], 'Size MW': [...]})
# present_df = pd.DataFrame({'Name': [...], 'Fuel': [...], 'Start date': [...], 'Size MW': [...]})
# future_df = pd.DataFrame({'Name': [...], 'Fuel': [...], 'Start date': [...], 'Size MW': [...]})

# timeseries = create_timeseries(retire_df, present_df, future_df)