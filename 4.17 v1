def create_weighted_contracts(df, hours_df):
    df = df.copy()
    contract_map = dict(zip(hours_df['Letter Contract'], hours_df['Hours']))
    
    month_map = {
        'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4,
        'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8,
        'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
    }

    month_groups = {
        'Winter': ['Jan', 'Feb'],
        'Summer': ['Jul', 'Aug'],
        'Q4': ['Oct', 'Nov', 'Dec'],
        'Cal': list(month_map.keys())
    }

    product_years = {}
    for col in df.columns:
        parts = col.split('_')
        if len(parts) < 2:
            continue
        product = '_'.join(parts[:-1])
        month_str = parts[-1][:3]
        year = '20' + parts[-1][3:]
        product_years.setdefault((product, year), []).append(col)

    for (product, year), cols in product_years.items():
        month_to_col = {col.split('_')[-1][:3]: col for col in cols}
        for group_name, group_months in month_groups.items():
            group_cols = [month_to_col[m] for m in group_months if m in month_to_col]
            weights = [contract_map[m] for m in group_months if m in month_to_col]
            if group_cols:
                weighted = df[group_cols].multiply(weights, axis=1).sum(axis=1) / sum(weights)
                new_col_name = f"{product}_{group_name}{year[-2:]}"
                df[new_col_name] = weighted

    return df