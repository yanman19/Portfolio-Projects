import pandas as pd
import numpy as np
from datetime import datetime
import panel as pn

pn.extension('tabulator')

def create_seasonal_pivot(df, value_column):
    df = df.copy()
    df['MARKETDATE'] = pd.to_datetime(df['MARKETDATE'])
    df['Year'] = df['MARKETDATE'].dt.year
    df['Month'] = df['MARKETDATE'].dt.month
    df['MonthCode'] = df['Month'].map({
        1: 'F', 2: 'G', 3: 'H', 4: 'J', 5: 'K', 6: 'M',
        7: 'N', 8: 'Q', 9: 'U', 10: 'V', 11: 'X', 12: 'Z'
    })

    pivot = df.pivot_table(index='Year', columns='MonthCode', values=value_column, aggfunc='mean')

    fg = ['F', 'G']
    hj = ['H', 'J']
    nq = ['N', 'Q']
    q4 = ['V', 'X', 'Z']

    pivot['FG'] = pivot[fg].mean(axis=1)
    pivot['HJ'] = pivot[hj].mean(axis=1)
    pivot['NQ'] = pivot[nq].mean(axis=1)
    pivot['Q4'] = pivot[q4].mean(axis=1)
    pivot['CAL'] = pivot[[c for c in pivot.columns if c in list('FGHJKMNQUVXZ')]].mean(axis=1)

    final_cols = [c for c in list('FGHJKMNQUVXZ') if c in pivot.columns] + ['FG', 'HJ', 'NQ', 'Q4', 'CAL']
    pivot = pivot[final_cols]
    pivot.columns.name = None
    pivot.index.name = None  # Remove the 'Year' index name
    pivot = pivot.applymap(lambda x: f"{x:.1f}" if pd.notnull(x) else "")

    def color_cells(val, row_year, col):
        if row_year == datetime.now().year:
            return 'background-color: #E6E6FA'
        if col in ['FG', 'F', 'G']:
            return 'background-color: #ADD8E6'
        if col in ['HJ', 'H', 'J']:
            return 'background-color: #90EE90'
        if col in ['NQ', 'N', 'Q']:
            return 'background-color: #FFDAB9'
        if col in ['Q4', 'V', 'X', 'Z']:
            return 'background-color: #FFFFE0'
        return ''

    def style_func(row):
        year = row.name
        return [color_cells(row[col], year, col) for col in row.index]

    styled = pivot.style.apply(style_func, axis=1)
    styled.set_table_styles([
        {'selector': 'th, td', 'props': [
            ('text-align', 'center'),
            ('min-width', '50px'),
            ('max-width', '70px'),
            ('border', '1px solid #ccc'),
            ('padding', '5px'),
            ('font-family', 'Arial, sans-serif'),
            ('font-size', '12px')
        ]},
        {'selector': 'table', 'props': [
            ('border-collapse', 'collapse'),
            ('margin', '0 auto'),
            ('width', '100%')
        ]}
    ])
    return styled

def create_tab_content(df, all_columns):
    trade_types = ['SPARK', 'FP', 'HR', 'GASBASIS', 'SPREAD']
    dropdown = pn.widgets.Select(
        name='Trade Type:',
        options=trade_types,
        width=200,
        margin=(0, 0, 20, 0)
    )

    dropdown_container = pn.Row(dropdown, width=300, margin=(0, 0, 20, 0))
    grid_area = pn.Column(sizing_mode='fixed', width=2500)

    def update_table(event=None):
        keyword = dropdown.value
        matching_cols = [col for col in all_columns if keyword in col]
        grid_area.clear()

        for i in range(0, len(matching_cols), 2):
            row = pn.Row(sizing_mode='fixed', width=2500)

            col1 = matching_cols[i]
            styled1 = create_seasonal_pivot(df, col1)
            title1 = pn.pane.Markdown(
                f"<div style='text-align:center; font-size:20px; font-weight:600; margin-bottom:10px; width:100%'>{col1}</div>"
            )
            table1 = pn.pane.HTML(styled1.render(), width=1200, height=400)
            block1 = pn.Column(title1, table1, width=1200, css_classes=['table-container'])

            row.append(block1)

            if i + 1 < len(matching_cols):
                col2 = matching_cols[i + 1]
                styled2 = create_seasonal_pivot(df, col2)
                title2 = pn.pane.Markdown(
                    f"<div style='text-align:center; font-size:20px; font-weight:600; margin-bottom:10px; width:100%'>{col2}</div>"
                )
                table2 = pn.pane.HTML(styled2.render(), width=1200, height=400)
                block2 = pn.Column(title2, table2, width=1200, css_classes=['table-container'])
                row.append(block2)

            grid_area.append(row)
            grid_area.append(pn.Spacer(height=40))

    pn.config.raw_css.append("""
    .table-container {
        border: 1px solid #f0f0f0;
        padding: 15px;
        background-color: white;
        box-shadow: 0px 0px 5px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .bk-input-group {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    label.bk-input-label {
        text-align: left;
        width: 100%;
    }
    """)

    dropdown.param.watch(update_table, 'value')
    update_table()

    return pn.Column(
        dropdown_container,
        pn.Spacer(height=10),
        grid_area,
        width=2500,
        css_classes=['content-container']
    )

def create_fundamentals_tab_content(df_dict, fundamental_columns):
    grid_area = pn.Column(sizing_mode='fixed', width=2500)
    
    # Get all column names from all dataframes
    all_cols = []
    for key in df_dict:
        all_cols.extend(fundamental_columns.get(key, []))
    
    # Create tables for each region (2x2 grid)
    regions = ['PEAK', '2X16', 'NIGHTS', 'ATC']
    
    for i in range(0, len(regions), 2):
        row = pn.Row(sizing_mode='fixed', width=2500)
        
        for j in range(2):  # Two columns per row
            if i + j < len(regions):
                region = regions[i + j]
                region_cols = fundamental_columns.get(region, [])
                
                if region in df_dict and len(region_cols) > 0:
                    # Create a column of tables for this region
                    region_container = pn.Column(width=1200, css_classes=['table-container'])
                    
                    # Add region title
                    region_title = pn.pane.Markdown(
                        f"<div style='text-align:center; font-size:24px; font-weight:600; margin-bottom:20px; width:100%'>{region}</div>"
                    )
                    region_container.append(region_title)
                    
                    # Add tables for each column in this region
                    for col in region_cols:
                        styled = create_seasonal_pivot(df_dict[region], col)
                        col_title = pn.pane.Markdown(
                            f"<div style='text-align:center; font-size:20px; font-weight:600; margin:20px 0 10px 0; width:100%'>{col}</div>"
                        )
                        table = pn.pane.HTML(styled.render(), width=1150, height=400)
                        region_container.append(col_title)
                        region_container.append(table)
                        region_container.append(pn.Spacer(height=20))
                    
                    row.append(region_container)
                    
        grid_area.append(row)
        grid_area.append(pn.Spacer(height=40))
    
    return pn.Column(
        pn.Spacer(height=20),
        grid_area,
        width=2500,
        css_classes=['content-container']
    )

def generate_price_tracker_tabs(data_dict, column_list):
    tabs = []
    for label, df in data_dict.items():
        tabs.append((label.upper(), create_tab_content(df, column_list)))
    tabs.append(("SPREADS", pn.Column(pn.Spacer(height=20), width=2500)))
    return pn.Tabs(*tabs, tabs_location='above', width=2500)

def generate_main_dashboard(price_tracker_tabs, fundamentals_content, timestamp):
    header_html = """
    <div style="font-size: 48px; font-family: Arial, sans-serif; margin: 20px 0 10px 0; text-align: left;">
        <span style="color: #4285F4;">Y</span>
        <span style="color: #DB4437;">A</span>
        <span style="color: #F4B400;">N</span>
        <span style="color: #0F9D58;">U</span>
        <span style="color: #4285F4;">S</span>
    </div>
    """

    last_updated_html = f"""
    <div style="font-size: 16px; font-family: Arial, sans-serif; margin-bottom: 30px; text-align: left; color: gray;">
        Last updated: {timestamp}
    </div>
    """

    top_level_tabs = pn.Tabs(
        ('Price Tracker', price_tracker_tabs),
        ('Cash', pn.Column(pn.Spacer(height=20), width=2500)),
        ('Seasonal', pn.Column(pn.Spacer(height=20), width=2500)),
        ('Fundamentals', fundamentals_content),
        tabs_location='above',
        width=2500
    )

    return pn.Column(
        pn.pane.HTML(header_html),
        pn.pane.HTML(last_updated_html),
        top_level_tabs,
        width=2500
    )

# Load price data
peak_df = pd.read_csv("peak.csv")
offpeak_df = pd.read_csv("offpeak.csv")
nights_df = pd.read_csv("nights.csv")
atc_df = pd.read_csv("atc.csv")

all_columns = ['SPARK1', 'SPARK2', 'FP1', 'HR1', 'GASBASIS1', 'SPREAD1', 'SPREAD2']

dataframes = {
    'Peak': peak_df,
    'Offpeak': offpeak_df,
    'Nights': nights_df,
    'ATC': atc_df
}

# Load fundamental data
fundamental_dfs = {
    'PEAK': pd.DataFrame(),  # These will be loaded from the dataframe dictionary
    '2X16': pd.DataFrame(),
    'NIGHTS': pd.DataFrame(),
    'ATC': pd.DataFrame()
}

# Define the columns to show in the fundamentals tab for each region
fundamental_columns = {
    'PEAK': ['LOAD', 'SOLAR', 'WIND', 'HYDRO', 'NUCLEAR', 'COAL', 'GAS'],
    '2X16': ['LOAD', 'SOLAR', 'WIND', 'HYDRO', 'NUCLEAR'],
    'NIGHTS': ['LOAD', 'WIND', 'HYDRO', 'COAL', 'GAS'],
    'ATC': ['LOAD', 'SOLAR', 'WIND', 'HYDRO', 'NUCLEAR', 'COAL', 'GAS']
}

# This is where you would load your fundamental dataframes
# fundamental_dfs = load_fundamental_data()  # Replace with your loading function

timestamp = datetime.now().strftime("%m/%d %H:%M")
price_tracker_tabs = generate_price_tracker_tabs(dataframes, all_columns)
fundamentals_content = create_fundamentals_tab_content(fundamental_dfs, fundamental_columns)
dashboard = generate_main_dashboard(price_tracker_tabs, fundamentals_content, timestamp)
dashboard.save("YANUS.html", embed=True)

print("YANUS dashboard saved as 'YANUS.html'")

# Example of how you would load the fundamental dataframes
# This is just a placeholder - you would replace this with your actual loading code
def load_fundamental_data():
    # This is where you would load your fundamental data
    # For example:
    # peak_fundamentals = pd.read_csv("peak_fundamentals.csv")
    # etc.
    
    # For now, we'll just use empty dataframes with the same structure as the price dataframes
    fundamental_dfs = {
        'PEAK': peak_df.copy(),  # Using price data as placeholders
        '2X16': offpeak_df.copy(),
        'NIGHTS': nights_df.copy(),
        'ATC': atc_df.copy()
    }
    
    return fundamental_dfs

# Uncomment and use this when you have your fundamental data
# fundamental_dfs = load_fundamental_data()