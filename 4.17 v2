def create_weighted_contracts(df, hours_df):
    df = df.copy()
    
    # Extract month and year from Letter Contract like 'Jan28'
    hours_df['Month'] = hours_df['Letter Contract'].str[:3]
    hours_df['Year'] = '20' + hours_df['Letter Contract'].str[3:]
    hours_df['Key'] = hours_df['Month'] + hours_df['Year']
    contract_map = dict(zip(hours_df['Key'], hours_df['Hours']))

    month_groups = {
        'Winter': ['Jan', 'Feb'],
        'Summer': ['Jul', 'Aug'],
        'Q4': ['Oct', 'Nov', 'Dec'],
        'Cal': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    }

    product_years = {}
    for col in df.columns:
        parts = col.split('_')
        if len(parts) < 2:
            continue
        product = '_'.join(parts[:-1])
        month = parts[-1][:3]
        year = '20' + parts[-1][3:]
        product_years.setdefault((product, year), []).append((col, month))

    for (product, year), col_months in product_years.items():
        month_to_col = {month: col for col, month in col_months}
        for group_name, group_months in month_groups.items():
            valid_months = [m for m in group_months if m in month_to_col]
            group_cols = [month_to_col[m] for m in valid_months]
            weight_keys = [m + year for m in valid_months]
            weights = [contract_map[k] for k in weight_keys if k in contract_map]
            if group_cols and len(weights) == len(group_cols):
                weighted = df[group_cols].multiply(weights, axis=1).sum(axis=1) / sum(weights)
                new_col = f"{product}_{group_name}{year[-2:]}"
                df[new_col] = weighted

    return df