import pandas as pd
from prophet import Prophet
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt

def convert_year(df, year):
    df['Datetime1'] = df['Datetime1'].apply(lambda x: x.replace(year=year))
    return df

def prophet_forecast(dataframe, target_col, datetime_col, prediction_df):
    # Prepare the data for Prophet
    df = dataframe.rename(columns={datetime_col: 'ds', target_col: 'y'})
    
    # Select predictors
    predictors = [col for col in df.columns if col not in ['ds', 'y']]
    
    # Split the data into train and test
    train = df.iloc[:-120]
    test = df.iloc[-120:]
    
    # Initialize the Prophet model
    model = Prophet()
    for predictor in predictors:
        model.add_regressor(predictor)
    
    # Fit the Prophet model with additional regressors
    model.fit(train[['ds', 'y'] + predictors])
    
    # Make predictions on the test set
    test_future = test[['ds'] + predictors]
    test_forecast = model.predict(test_future)
    
    # Combine the test set with the predictions
    test_df = test.copy()
    test_df['yhat'] = test_forecast['yhat'].values
    
    # Calculate error metrics
    mse = mean_squared_error(test_df['y'], test_df['yhat'])
    mae = mean_absolute_error(test_df['y'], test_df['yhat'])
    
    # Plot the results
    plt.figure(figsize=(10, 6))
    plt.plot(test_df['ds'], test_df['y'], label='Realized Values')
    plt.plot(test_df['ds'], test_df['yhat'], label='Predicted Values')
    plt.legend()
    plt.title(f'Realized vs Predicted Values for {target_col}\nMSE: {mse:.2f}, MAE: {mae:.2f}')
    plt.xlabel('Date')
    plt.ylabel(target_col)
    plt.grid()
    plt.show()
    
    # Prepare the prediction dataframe
    prediction_future = prediction_df.rename(columns={datetime_col: 'ds'})
    prediction_forecast = model.predict(prediction_future[['ds'] + predictors])
    prediction_df = prediction_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(
        columns={'ds': datetime_col, 'yhat': target_col})
    
    return test_df, plt, prediction_df, predictors

def run_forecast_on_dict(dataframes, input_year):
    # Convert years in all dataframes
    for key in dataframes:
        dataframes[key] = convert_year(dataframes[key], input_year)
    
    # Create dictionaries for outputs
    test_dfs = {}
    plots = {}
    prediction_dfs = {}
    predictors_dict = {}
    
    for key in dataframes:
        allData = dataframes[key]
        target_col = "DALoad"
        datetime_col = "Datetime1"
        prediction_df = dataframes[key].copy()
        
        test_df, plot, prediction_df, predictors = prophet_forecast(allData, target_col, datetime_col, prediction_df)
        
        test_dfs[key] = test_df
        plots[key] = plot
        prediction_dfs[key] = prediction_df
        predictors_dict[key] = predictors
    
    return test_dfs, plots, prediction_dfs, predictors_dict