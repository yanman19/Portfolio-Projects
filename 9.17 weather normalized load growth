import pandas as pd
import numpy as np
from xgboost import XGBRegressor
import warnings

# Suppress warnings for cleaner output
warnings.filterwarnings('ignore')

# Load data
data = pd.read_csv('your_data.csv', parse_dates=['timestamp'])

# Ensure 'hour', 'month', and 'year' columns exist
data['hour'] = data['timestamp'].dt.hour
data['month'] = data['timestamp'].dt.month
data['year'] = data['timestamp'].dt.year

# Define parameters
month = 7  # July
train_years = [2022]  # Years to train on
test_years = [2023]   # Years to test on
weather_vars = ['temperature', 'humidity']  # Replace with your actual weather variables
target = 'load'  # The load column in your dataset

# Define the function to calculate weather-normalized load growth using XGBoost
def calculate_weather_normalized_load_growth_xgb(
    data, hour, month, train_years, test_years, weather_vars, target
):
    # Filter data for the specified hour and month
    filtered_data = data[
        (data['hour'] == hour) &
        (data['month'] == month)
    ]
    
    # Separate data into training and testing sets based on specified years
    train_data = filtered_data[filtered_data['year'].isin(train_years)]
    test_data = filtered_data[filtered_data['year'].isin(test_years)]
    
    # Check if data for training and testing years is available
    if train_data.empty or test_data.empty:
        return None  # Return None if data is missing
    
    # Prepare features and target for training
    X_train = train_data[weather_vars]
    y_train = train_data[target]
    
    # Prepare features and target for testing
    X_test = test_data[weather_vars]
    y_test = test_data[target]
    
    # Initialize and train the XGBoost model
    model = XGBRegressor(
        objective='reg:squarederror',
        n_estimators=100,
        max_depth=5,
        learning_rate=0.1,
        random_state=42
    )
    model.fit(X_train, y_train)
    
    # Predict load for test data
    y_pred_test = model.predict(X_test)
    
    # Calculate residuals (errors)
    residuals = y_test.values - y_pred_test
    
    # Calculate average load growth
    average_load_growth = np.mean(residuals)
    
    # Calculate percentage load growth relative to average load in training data
    average_load_train = np.mean(y_train)
    percentage_load_growth = (average_load_growth / average_load_train) * 100
    
    # Return the results
    return {
        'hour': hour,
        'average_load_growth': average_load_growth,
        'percentage_load_growth': percentage_load_growth
    }

# Initialize a list to store results
results_list = []

# Loop through all hours of the day
for hour in range(24):
    result = calculate_weather_normalized_load_growth_xgb(
        data, hour, month, train_years, test_years, weather_vars, target
    )
    if result is not None:
        results_list.append(result)
    else:
        print(f"No data available for hour {hour}.")

# Create a DataFrame from the results
results_df = pd.DataFrame(results_list)

# Display the results
print("Weather-normalized load growth for each hour:")
print(results_df)
