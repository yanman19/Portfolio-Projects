import pandas as pd

def merge_and_categorize(df1, df2, df3, on_column):
    # Merge the three DataFrames on the specified column with outer join to ensure all matches and mismatches are captured
    merged_df = pd.merge(pd.merge(df1, df2, on=on_column, how='outer', suffixes=('_df1', '_df2')), df3, on=on_column, how='outer', suffixes=('', '_df3'))

    # Identify triple matches (rows where there are no NaN values across the suffixes columns)
    triple_match = merged_df.dropna(subset=[col for col in merged_df.columns if col.endswith('_df1') or col.endswith('_df2') or '_df3' in col])

    # Identify double matches (rows where exactly one of the sets of columns from df1, df2, or df3 is NaN)
    double_match = merged_df[((merged_df.filter(like='_df1').isna().all(axis=1)) & (~merged_df.filter(like='_df2').isna().all(axis=1)) & (~merged_df.filter(like='_df3').isna().all(axis=1))) | 
                             ((~merged_df.filter(like='_df1').isna().all(axis=1)) & (merged_df.filter(like='_df2').isna().all(axis=1)) & (~merged_df.filter(like='_df3').isna().all(axis=1))) |
                             ((~merged_df.filter(like='_df1').isna().all(axis=1)) & (~merged_df.filter(like='_df2').isna().all(axis=1)) & (merged_df.filter(like='_df3').isna().all(axis=1)))]

    # Identify single matches (rows where exactly two of the sets of columns from df1, df2, or df3 are NaN)
    single_match = merged_df[(merged_df.filter(like='_df1').isna().all(axis=1) & merged_df.filter(like='_df2').isna().all(axis=1)) |
                             (merged_df.filter(like='_df2').isna().all(axis=1) & merged_df.filter(like='_df3').isna().all(axis=1)) |
                             (merged_df.filter(like='_df1').isna().all(axis=1) & merged_df.filter(like='_df3').isna().all(axis=1))]

    # Returning the categorized DataFrames
    return triple_match, double_match, single_match

# Example usage
# df1 = pd.DataFrame(...)
# df2 = pd.DataFrame(...)
# df3 = pd.DataFrame(...)
# triple, double, single = merge_and_categorize(df1, df2, df3, 'merge_column')
