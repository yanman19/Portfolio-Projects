import pandas as pd
import numpy as np
from datetime import datetime
import panel as pn

pn.extension('tabulator')

def create_seasonal_pivot(df, value_column):
    df = df.copy()
    df['MARKETDATE'] = pd.to_datetime(df['MARKETDATE'])
    df['Year'] = df['MARKETDATE'].dt.year
    df['Month'] = df['MARKETDATE'].dt.month
    df['MonthCode'] = df['Month'].map({
        1: 'F', 2: 'G', 3: 'H', 4: 'J', 5: 'K', 6: 'M',
        7: 'N', 8: 'Q', 9: 'U', 10: 'V', 11: 'X', 12: 'Z'
    })

    pivot = df.pivot_table(index='Year', columns='MonthCode', values=value_column, aggfunc='mean')

    fg = ['F', 'G']
    hj = ['H', 'J']
    nq = ['N', 'Q']
    q4 = ['V', 'X', 'Z']

    pivot['FG'] = pivot[fg].mean(axis=1)
    pivot['HJ'] = pivot[hj].mean(axis=1)
    pivot['NQ'] = pivot[nq].mean(axis=1)
    pivot['Q4'] = pivot[q4].mean(axis=1)
    pivot['CAL'] = pivot[[c for c in pivot.columns if c in list('FGHJKMNQUVXZ')]].mean(axis=1)

    final_cols = [c for c in list('FGHJKMNQUVXZ') if c in pivot.columns] + ['FG', 'HJ', 'NQ', 'Q4', 'CAL']
    pivot = pivot[final_cols]
    pivot.columns.name = None
    pivot = pivot.applymap(lambda x: f"{x:.1f}" if pd.notnull(x) else "")

    def color_cells(val, row_year, col):
        if row_year == datetime.now().year:
            return 'background-color: #E6E6FA'
        if col in ['FG', 'F', 'G']:
            return 'background-color: #ADD8E6'
        if col in ['HJ', 'H', 'J']:
            return 'background-color: #90EE90'
        if col in ['NQ', 'N', 'Q']:
            return 'background-color: #FFDAB9'
        if col in ['Q4', 'V', 'X', 'Z']:
            return 'background-color: #FFFFE0'
        return ''

    def style_func(row):
        year = row.name
        return [color_cells(row[col], year, col) for col in row.index]

    styled = pivot.style.apply(style_func, axis=1)
    styled.set_table_styles([
        {'selector': 'th, td', 'props': [
            ('text-align', 'center'),
            ('min-width', '60px'),
            ('max-width', '60px'),
            ('border', '1px solid #ccc'),
            ('padding', '4px'),
            ('font-family', 'Arial, sans-serif')
        ]},
        {'selector': 'table', 'props': [('border-collapse', 'collapse'), ('margin', '0 auto')]}
    ])
    return styled

def create_tab_content(df, all_columns):
    trade_types = ['SPARK', 'FP', 'HR', 'GASBASIS', 'SPREAD']
    dropdown = pn.widgets.Select(name='Trade Type:', options=trade_types)

    grid_area = pn.Column(width=1300, sizing_mode='stretch_width')

    def update_table(event=None):
        keyword = dropdown.value
        matching_cols = [col for col in all_columns if keyword in col]
        grid_area.clear()
        
        # Create tables in pairs
        for i in range(0, len(matching_cols), 2):
            row_items = []
            
            # First table in the row
            col = matching_cols[i]
            styled = create_seasonal_pivot(df, col)
            title = pn.pane.Markdown(f"<div style='text-align:center; font-size:20px; font-weight:600;'>{col}</div>")
            table = pn.pane.HTML(styled.render(), width=600, height=400)
            first_block = pn.Column(title, table, width=600)
            row_items.append(first_block)
            
            # Add a spacer between tables
            row_items.append(pn.Spacer(width=50))
            
            # Second table in the row (if available)
            if i + 1 < len(matching_cols):
                col = matching_cols[i + 1]
                styled = create_seasonal_pivot(df, col)
                title = pn.pane.Markdown(f"<div style='text-align:center; font-size:20px; font-weight:600;'>{col}</div>")
                table = pn.pane.HTML(styled.render(), width=600, height=400)
                second_block = pn.Column(title, table, width=600)
                row_items.append(second_block)
            
            # Create the row with fixed width and add it to the grid
            row = pn.Row(*row_items, width=1250, align='start')
            
            # Add a spacer between rows
            grid_area.append(row)
            grid_area.append(pn.Spacer(height=30))

    dropdown.param.watch(update_table, 'value')
    update_table()

    return pn.Column(
        dropdown, 
        pn.Spacer(height=20),
        grid_area, 
        width=1300, 
        sizing_mode='stretch_width',
        align="center"
    )

def generate_yanus_tabs(data_dict, column_list):
    tabs = []
    for label, df in data_dict.items():
        tabs.append((label.upper(), create_tab_content(df, column_list)))

    header_html = """
    <div style="display: flex; justify-content: center; font-size: 48px; font-family: Arial, sans-serif; margin-top: 20px; margin-bottom: 40px;">
        <span style="color: #4285F4;">Y</span>
        <span style="color: #DB4437;">A</span>
        <span style="color: #F4B400;">N</span>
        <span style="color: #0F9D58;">U</span>
        <span style="color: #4285F4;">S</span>
    </div>
    """

    content = pn.Column(
        pn.pane.HTML(header_html), 
        pn.Tabs(*tabs, tabs_location='above'), 
        width=1350, 
        sizing_mode='stretch_width',
        align="center"
    )
    
    return pn.Row(
        pn.Spacer(width=25), 
        content, 
        pn.Spacer(width=25), 
        sizing_mode="stretch_width"
    )

# Load your data
peak_df = pd.read_csv("peak.csv")
offpeak_df = pd.read_csv("offpeak.csv")
nights_df = pd.read_csv("nights.csv")
atc_df = pd.read_csv("atc.csv")

# Column names to include
all_columns = ['SPARK1', 'SPARK2', 'FP1', 'HR1', 'GASBASIS1', 'SPREAD1', 'SPREAD2']  # replace as needed

# Tab mappings
dataframes = {
    'Peak': peak_df,
    'Offpeak': offpeak_df,
    'Nights': nights_df,
    'ATC': atc_df
}

# Create dashboard and export
multi_tab_dashboard = generate_yanus_tabs(dataframes, all_columns)
multi_tab_dashboard.save("YANUS.html", embed=True)

print("YANUS dashboard saved as 'YANUS.html'")