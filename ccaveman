import pandas as pd
import numpy as np

def calculate_strategy_metrics(df, product, lot_size, start_date, end_date):
    """
    Calculates PNL, Sharpe Ratio, Max Drawdown, and Value at Risk for a given product and lot size over a defined period.

    Parameters:
        df (DataFrame): Time series dataframe with asset prices.
        product (str): Column name representing the product (e.g., 'rggi' or 'cca').
        lot_size (int): Number of lots to be traded (positive for long, negative for short).
        start_date (str): Start date in 'YYYY-MM-DD' format.
        end_date (str): End date in 'YYYY-MM-DD' format.
        
    Returns:
        dict: A dictionary with Sharpe Ratio, Max Drawdown, PNL (Total), and Value at Risk (95%).
    """
    # Filter the dataframe to the desired date range
    df['date'] = pd.to_datetime(df['date'])
    df = df[(df['date'] >= start_date) & (df['date'] <= end_date)].set_index('date')

    # Calculate the number of business days in the filtered data
    business_days = np.busday_count(df.index.min().date(), df.index.max().date())

    # Calculate daily returns for the selected product
    returns = df[product].pct_change().dropna()

    # Define the strategy: lot_size long if return > 0, lot_size short if return < 0
    positions = np.where(returns > 0, lot_size, -lot_size)

    # Calculate PNL for each day
    pnl = positions * returns

    # Calculate cumulative PNL
    cumulative_pnl = pnl.cumsum()

    # Calculate Sharpe Ratio using actual business days
    sharpe_ratio = (pnl.mean() / pnl.std()) * np.sqrt(business_days)

    # Calculate Max Drawdown
    rolling_max = cumulative_pnl.cummax()
    drawdown = cumulative_pnl - rolling_max
    max_drawdown = drawdown.min()

    # Calculate Value at Risk (VaR) at 95% confidence level
    var_95 = np.percentile(pnl, 5)

    # Return the results as a dictionary
    return {
        'Sharpe Ratio': sharpe_ratio,
        'Max Drawdown': max_drawdown,
        'PNL (Total)': cumulative_pnl.iloc[-1],
        'Value at Risk (95%)': var_95
}

# Example usage
# Assuming 'df' is your dataframe
result = calculate_strategy_metrics(df, product='rggi', lot_size=100, start_date='2023-01-01', end_date='2023-12-31')

# Print results
for metric, value in result.items():
    print(f"{metric}: {value}")