import pandas as pd

data = [
    ("2018-12-18", 2019, 6.71),
    ("2019-12-17", 2019, 8.26),
    ("2019-12-17", 2020, 8.00),
    ("2020-09-22", 2020, 7.50),
    ("2020-12-16", 2021, 7.25),
    ("2021-03-11", 2021, 6.50),
    ("2021-06-09", 2021, 7.75),
    ("2021-09-15", 2021, 10.00),
    ("2021-12-15", 2022, 9.75),
    ("2022-03-18", 2022, 0.50),
    ("2022-06-10", 2022, 9.75),
    ("2022-06-10", 2023, 4.00),
    ("2022-09-14", 2022, 14.73),
    ("2022-09-14", 2023, 7.51),
    ("2022-12-14", 2023, 14.20),
    ("2022-12-14", 2024, 6.03),
    ("2023-03-15", 2023, 12.05),
    ("2023-03-15", 2024, 5.85),
    ("2023-06-14", 2023, 9.40),
    ("2023-06-14", 2024, 6.53),
    ("2023-09-13", 2023, 3.00),
    ("2023-09-13", 2024, 3.00),
    ("2023-12-13", 2024, 2.25),
    ("2023-12-13", 2025, 1.75),
    ("2024-03-13", 2024, 2.25),
    ("2024-03-13", 2025, 1.75),
    ("2024-06-12", 2024, 1.25),
    ("2024-06-12", 2025, 1.25),
    ("2024-09-18", 2024, 5.65),
    ("2024-09-18", 2025, 5.50),
    ("2024-12-11", 2025, 6.06),
    ("2024-12-11", 2026, 4.99),
    ("2025-03-19", 2025, 9.30),
    ("2025-03-19", 2026, 6.06),
    ("2025-06-11", 2025, 12.00),
    ("2025-06-11", 2026, 8.00),
]

df = pd.DataFrame(data, columns=["auction_date", "vintage", "price"])
df["auction_date"] = pd.to_datetime(df["auction_date"])
df["auction_year"] = df["auction_date"].dt.year

def choose_effective(group):
    y = int(group["auction_year"].iloc[0])
    same_or_future = group[group["vintage"] >= y]
    if not same_or_future.empty:
        pick = same_or_future.loc[same_or_future["vintage"].idxmin()]
    else:
        pick = group.loc[group["vintage"].idxmax()]
    return pd.Series({"price": pick["price"]})

chosen = (
    df.sort_values(["auction_date", "vintage"])
      .groupby("auction_date", as_index=True)
      .apply(choose_effective)
      .reset_index()
)

start = chosen["auction_date"].min()
end = pd.Timestamp.today().normalize()
daily_idx = pd.date_range(start, end, freq="D")
series = (
    chosen.set_index("auction_date")["price"]
          .reindex(daily_idx)
          .ffill()
)
series.name = "MA_Carbon_Effective_USD_per_tCO2e"

carbon_daily = series.to_frame()

# Example merge:
# other_df = ...  # has a datetime column 'date'
# merged = other_df.merge(carbon_daily, how="left", left_on="date", right_index=True)
# merged
carbon_daily