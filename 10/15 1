import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import dash_table
import pandas as pd
import os
from datetime import datetime, timedelta
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
import plotly.graph_objs as go
import seaborn as sns
from io import BytesIO
import base64
import socket

# Paths to CSV data
BASE_PATH = r'V:\Commodities\Energy2\ficc_power\New Hierarchy\Fundamentals\New England\HROCE\exercise\code'
CSV_PATH_NEPOOL = os.path.join(BASE_PATH, 'NEP_Scenarios')
CSV_PATH_NYE = os.path.join(BASE_PATH, 'NYE_Scenarios')

# Load common data
cash_performance = pd.read_csv('daily_nepool_errors.csv')
predictions = pd.read_csv('daily_nepool_forecast.csv')

variables = [
    'NEISO_Temp (F)', 'NEISO_Dew Point (F)', 'NEISO_Cloud Cover',
    'NEISO_Heat Index (F)', 'NEISO_Precip (in)', 'DA_Load', 'Thermal Load',
    'Thermal Out', 'Total Generation', 'windGen', 'Hydrogen', 'OtherGen',
    'nukeGen', 'solarGen', 'Total IMEX', 'CSGITEcDA', 'NEISO_IFTDA',
    'NorthernDA', 'NorthernACTIEDA', 'Phase1_IFTEDA', 'Slack_Stack', 
    'OilGen', 'ALCC6', 'HR_adj'
]

app = dash.Dash(__name__)
app.title = "YANUS"
app.layout = html.Div(id='page-content')

def yanus_layout():
    return html.Div([
        html.H1("YANUS Home", style={'textAlign': 'center'}),
        dcc.Link("Go to NEPOOL", href='/nepool', style={'margin': '10px'}),
        dcc.Link("Go to NYE", href='/nye', style={'margin': '10px'}),
    ])

def generate_year_layout(path, year):
    csv_file = os.path.join(path, f'FV_Market_{year}.csv')
    df = pd.read_csv(csv_file)
    max_diff = df['Difference'].abs().max()

    style_data_conditional = [
        {'if': {'filter_query': f'{{Difference}} = {row["Difference"]}'},
         'backgroundColor': generate_color_scale(row['Difference'], max_diff),
         'color': 'black'} for index, row in df.iterrows()
    ]

    return html.Div([
        html.H1(f'Select a Month for Year {year}'),
        html.Div([html.A(str(i), href=f'/{year}/month/{i}',
                         style={'margin-right': '10px'}) for i in range(1, 13)]),
        html.Div(html.A('Go back', href='/',
                        style={'margin-bottom': '20px'})),
        dash_table.DataTable(
            columns=[{'name': i, 'id': i} for i in df.columns],
            data=df.to_dict('records'),
            style_data_conditional=style_data_conditional,
            style_cell={'textAlign': 'left'},
            style_table={'overflowX': 'auto'}
        )
    ])

def generate_color_scale(value, max_value):
    intensity = min(max(abs(value) / max_value, 0.1), 1.0)
    if value < 0:
        green_intensity = int(128 + (1 - intensity) * 127)
        return f'rgb(0, {green_intensity}, 0)'
    else:
        red_intensity = int(128 + (1 - intensity) * 127)
        return f'rgb({red_intensity}, 0, 0)'

@app.callback(Output('page-content', 'children'), [Input('url', 'pathname')])
def display_page(pathname):
    if pathname == '/nepool':
        return generate_home_layout(CSV_PATH_NEPOOL)
    elif pathname == '/nye':
        return generate_home_layout(CSV_PATH_NYE)
    elif pathname.startswith('/nepool/202'):
        year = pathname.split('/')[2]
        return generate_year_layout(CSV_PATH_NEPOOL, year)
    elif pathname.startswith('/nye/202'):
        year = pathname.split('/')[2]
        return generate_year_layout(CSV_PATH_NYE, year)
    elif '/month/' in pathname:
        segments = pathname.split('/')
        year, month = segments[2], segments[4]
        if 'nepool' in pathname:
            return generate_month_layout(CSV_PATH_NEPOOL, year, month)
        elif 'nye' in pathname:
            return generate_month_layout(CSV_PATH_NYE, year, month)
    else:
        return yanus_layout()

def generate_home_layout(path):
    return html.Div([
        html.H1("Select a Year", style={'textAlign': 'center'}),
        html.Div([html.A(f"{year}", href=f'/{path}/{year}',
                         style={'margin-right': '10px'}) for year in range(2024, 2029)]),
    ])

def generate_month_layout(path, year, month):
    return html.Div([
        html.H1(f"Data for {year} - Month {month}", style={'textAlign': 'center'}),
        html.A("Go back to Year", href=f'/{path}/{year}', style={'margin': '20px'}),
    ])

# Run the app
if __name__ == '__main__':
    ip_address = socket.gethostbyname(socket.gethostname())
    app.run_server(debug=False, host=ip_address, port=8054)