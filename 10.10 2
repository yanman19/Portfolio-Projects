def adjust_distribution_dict(df_dict, x_col, target_mean, target_std):
    # Define a helper function to adjust a single DataFrame
    def adjust_distribution(df, x_col, target_mean, target_std):
        # Copy the original DataFrame to avoid modifying it directly
        filtered_df = df.copy()
        
        # Calculate the original mean and standard deviation
        original_mean = filtered_df[x_col].mean()
        original_std = filtered_df[x_col].std()
        
        # Step 1: Adjust to set the mean to target_mean
        mean_adjustment_factor = target_mean / original_mean
        filtered_df[x_col] *= mean_adjustment_factor
        
        # Step 2: Adjust to set the standard deviation to target_std
        new_std = filtered_df[x_col].std()
        std_adjustment_factor = target_std / new_std
        filtered_df[x_col] = (filtered_df[x_col] - target_mean) * std_adjustment_factor + target_mean
        
        return filtered_df

    # Iterate through each DataFrame in the dictionary and apply the adjustments
    adjusted_df_dict = {key: adjust_distribution(df, x_col, target_mean, target_std) 
                        for key, df in df_dict.items()}
    
    return adjusted_df_dict