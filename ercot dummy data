import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Set seed for reproducibility
np.random.seed(42)

# Create date range from 1/1/2010 to today
start_date = datetime(2010, 1, 1)
end_date = datetime(2025, 3, 28)  # Current date (or use datetime.now())
date_range = pd.date_range(start=start_date, end=end_date, freq='D')

# Create DataFrame with dates
df = pd.DataFrame({'Date': date_range})

# Define power regions
power_regions = ['ERCOT_North', 'ERCOT_Houston', 'ERCOT_West', 'ERCOT_South']

# Define price indices
price_indices = ['Peak', 'OffPeak', '2x16', '7x8', 'ATC']

# Base prices and volatility parameters for different regions
base_prices = {
    'ERCOT_North': 35,
    'ERCOT_Houston': 38,
    'ERCOT_West': 32,
    'ERCOT_South': 36,
    'Waha_Gas': 3.2,  # $/MMBtu
    'Henry_Gas': 3.5  # $/MMBtu
}

volatility = {
    'ERCOT_North': 0.15,
    'ERCOT_Houston': 0.18,
    'ERCOT_West': 0.20,
    'ERCOT_South': 0.17,
    'Waha_Gas': 0.25,
    'Henry_Gas': 0.2
}

# Seasonal factors (multipliers for each month)
seasonal_factors = {
    1: 1.2,  # January
    2: 1.15,
    3: 0.9,
    4: 0.85,
    5: 1.0,
    6: 1.3,  # Summer peak
    7: 1.4,  # Summer peak
    8: 1.45, # Summer peak
    9: 1.15,
    10: 0.9,
    11: 0.95,
    12: 1.1   # December
}

# Index multipliers (relative to base price)
index_multipliers = {
    'Peak': 1.3,
    'OffPeak': 0.7,
    '2x16': 1.1,
    '7x8': 0.65,
    'ATC': 1.0
}

# Function to generate price series with trends, seasonality, and random variation
def generate_price_series(base_price, volatility, dates, product_type):
    # Add long-term trend component
    years = (dates - dates[0]).days / 365.25
    if product_type.startswith('ERCOT'):
        # ERCOT prices had a general upward trend
        trend = base_price * (1 + 0.04 * years)
    else:
        # Gas prices had more volatility with periods of high and low prices
        trend = base_price * (1 + 0.02 * np.sin(years * 0.5) + 0.01 * years)
    
    # Add seasonal component
    month = dates.month
    seasonal = np.array([seasonal_factors[m] for m in month])
    
    # Special adjustments for extreme events
    
    # 2021 Texas Winter Storm (February 2021)
    if product_type.startswith('ERCOT'):
        winter_storm_mask = (dates.year == 2021) & (dates.month == 2) & (dates.day >= 14) & (dates.day <= 19)
        seasonal[winter_storm_mask] *= 15  # Extreme price spike
    
    # COVID-19 impact (March-May 2020)
    covid_mask = (dates.year == 2020) & (dates.month >= 3) & (dates.month <= 5)
    seasonal[covid_mask] *= 0.7  # Reduced demand
    
    # Add random component
    random = np.exp(np.random.normal(0, volatility, len(dates)))
    
    # Combine components
    prices = trend * seasonal * random
    
    # Add daily patterns
    day_of_week = dates.dayofweek
    weekend_mask = (day_of_week >= 5)  # Saturday and Sunday
    prices[weekend_mask] *= 0.85  # Weekend discount
    
    return prices

# Generate prices for each power region and index
for region in power_regions:
    base_price = base_prices[region]
    vol = volatility[region]
    base_series = generate_price_series(base_price, vol, date_range, region)
    
    for index in price_indices:
        col_name = f"{region}_{index}"
        multiplier = index_multipliers[index]
        df[col_name] = base_series * multiplier
        
        # Round to 2 decimal places
        df[col_name] = np.round(df[col_name], 2)

# Generate gas prices
for gas in ['Waha_Gas', 'Henry_Gas']:
    base_price = base_prices[gas]
    vol = volatility[gas]
    df[gas] = generate_price_series(base_price, vol, date_range, gas)
    df[gas] = np.round(df[gas], 2)

# Save to CSV
df.to_csv('ercot_gas_prices.csv', index=False)

print(f"CSV file generated successfully: ercot_gas_prices.csv")
print(f"Total rows: {len(df)}")
print(f"Total columns: {len(df.columns)}")
print(f"Date range: {df['Date'].min()} to {df['Date'].max()}")
print(f"Column names: {', '.join(df.columns)}")