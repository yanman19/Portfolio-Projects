import pandas as pd
import numpy as np
from IPython.display import display, HTML

def create_temperature_pivots(df1):
    """
    Create 24 pivot tables (2 per month) with color gradients for temperature data
    """
    
    # Ensure MARKETDATE is datetime if it isn't already
    if not pd.api.types.is_datetime64_any_dtype(df1['MARKETDATE']):
        df1['MARKETDATE'] = pd.to_datetime(df1['MARKETDATE'])
    
    # Group by MONTH, DAY, YEAR and calculate min/max for each day
    daily_agg = df1.groupby(['MONTH', 'DAY', 'YEAR'])['ERCOT_Pop Temp (F)'].agg(['min', 'max']).reset_index()
    
    # Create pivots for each month
    months = sorted(df1['MONTH'].unique())
    month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    
    # Store all styled pivot tables
    styled_pivots = []
    
    for month in months:
        month_data = daily_agg[daily_agg['MONTH'] == month]
        month_name = month_names[month - 1]
        
        # Create MIN pivot
        min_pivot = month_data.pivot(index='DAY', columns='YEAR', values='min')
        
        # Create MAX pivot  
        max_pivot = month_data.pivot(index='DAY', columns='YEAR', values='max')
        
        # Custom color gradient functions
        def color_gradient_min(val):
            """Blue gradient for min values - lower values are more blue"""
            if pd.isna(val):
                return 'background-color: white; color: transparent'
            
            # Get min and max values for scaling (excluding NaN)
            valid_values = min_pivot.values[~pd.isna(min_pivot.values)]
            if len(valid_values) == 0:
                return 'background-color: white; color: transparent'
            
            min_val = valid_values.min()
            max_val = valid_values.max()
            
            if max_val == min_val:
                return 'background-color: lightblue; color: transparent'
            
            # Normalize value (0 to 1)
            normalized = (val - min_val) / (max_val - min_val)
            
            # Invert so lower values are more blue
            blue_intensity = 1 - normalized
            
            # Create blue gradient (higher blue_intensity = more blue)
            if blue_intensity < 0.1:
                return 'background-color: white; color: transparent'
            else:
                blue_value = int(255 - (blue_intensity * 100))  # Lighter blue for lower temps
                return f'background-color: rgb({blue_value}, {blue_value}, 255); color: transparent'
        
        def color_gradient_max(val):
            """Red gradient for max values - higher values are more red"""
            if pd.isna(val):
                return 'background-color: white; color: transparent'
            
            # Get min and max values for scaling (excluding NaN)
            valid_values = max_pivot.values[~pd.isna(max_pivot.values)]
            if len(valid_values) == 0:
                return 'background-color: white; color: transparent'
            
            min_val = valid_values.min()
            max_val = valid_values.max()
            
            if max_val == min_val:
                return 'background-color: lightcoral; color: transparent'
            
            # Normalize value (0 to 1)
            normalized = (val - min_val) / (max_val - min_val)
            
            # Higher values are more red
            red_intensity = normalized
            
            # Create red gradient
            if red_intensity < 0.1:
                return 'background-color: white; color: transparent'
            else:
                red_value = int(255 - (red_intensity * 100))  # Lighter red for lower temps
                return f'background-color: rgb(255, {red_value}, {red_value}); color: transparent'
        
        # Apply styling
        styled_min = min_pivot.style.applymap(color_gradient_min).set_caption(
            f'{month_name} - Minimum Temperatures'
        ).format("{:.1f}")
        
        styled_max = max_pivot.style.applymap(color_gradient_max).set_caption(
            f'{month_name} - Maximum Temperatures'  
        ).format("{:.1f}")
        
        styled_pivots.extend([styled_min, styled_max])
    
    return styled_pivots

# Create and display all pivot tables
styled_tables = create_temperature_pivots(df1)

# Display all tables
print("Temperature Analysis: 24 Pivot Tables (Min/Max by Month)")
print("=" * 60)

for i, table in enumerate(styled_tables):
    print(f"\nTable {i+1}:")
    display(table)

# Alternative: Save to HTML file
def save_pivots_to_html(styled_tables, filename='temperature_pivots.html'):
    """Save all styled pivot tables to an HTML file"""
    
    html_content = """
    <html>
    <head>
        <title>Temperature Pivot Analysis</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .pivot-container { margin-bottom: 30px; }
            table { border-collapse: collapse; margin: 10px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
            th { background-color: #f2f2f2; font-weight: bold; }
            .caption { font-weight: bold; font-size: 14px; margin-bottom: 10px; }
        </style>
    </head>
    <body>
        <h1>Temperature Pivot Analysis</h1>
        <p>Blue gradients show minimum temperatures (darker blue = colder)</p>
        <p>Red gradients show maximum temperatures (darker red = hotter)</p>
    """
    
    for i, table in enumerate(styled_tables):
        html_content += f'<div class="pivot-container">{table.to_html()}</div>'
    
    html_content += """
    </body>
    </html>
    """
    
    with open(filename, 'w') as f:
        f.write(html_content)
    
    print(f"Pivot tables saved to {filename}")

# Uncomment to save to HTML file
# save_pivots_to_html(styled_tables)