import pandas as pd
import numpy as np
from datetime import datetime
import panel as pn

pn.extension('tabulator')

def create_seasonal_pivot(df, value_column):
    df = df.copy()
    df['MARKETDATE'] = pd.to_datetime(df['MARKETDATE'])
    df['Year'] = df['MARKETDATE'].dt.year
    df['Month'] = df['MARKETDATE'].dt.month
    df['MonthCode'] = df['Month'].map({
        1: 'F', 2: 'G', 3: 'H', 4: 'J', 5: 'K', 6: 'M',
        7: 'N', 8: 'Q', 9: 'U', 10: 'V', 11: 'X', 12: 'Z'
    })

    pivot = df.pivot_table(index='Year', columns='MonthCode', values=value_column, aggfunc='mean')

    fg = ['F', 'G']
    hj = ['H', 'J']
    nq = ['N', 'Q']
    q4 = ['V', 'X', 'Z']

    pivot['FG'] = pivot[fg].mean(axis=1)
    pivot['HJ'] = pivot[hj].mean(axis=1)
    pivot['NQ'] = pivot[nq].mean(axis=1)
    pivot['Q4'] = pivot[q4].mean(axis=1)
    pivot['CAL'] = pivot[[c for c in pivot.columns if c in list('FGHJKMNQUVXZ')]].mean(axis=1)

    final_cols = [c for c in list('FGHJKMNQUVXZ') if c in pivot.columns] + ['FG', 'HJ', 'NQ', 'Q4', 'CAL']
    pivot = pivot[final_cols]
    pivot.columns.name = None
    pivot = pivot.applymap(lambda x: f"{x:.1f}" if pd.notnull(x) else "")

    def color_cells(val, row_year, col):
        if row_year == datetime.now().year:
            return 'background-color: #E6E6FA'
        if col in ['FG', 'F', 'G']:
            return 'background-color: #ADD8E6'
        if col in ['HJ', 'H', 'J']:
            return 'background-color: #90EE90'
        if col in ['NQ', 'N', 'Q']:
            return 'background-color: #FFDAB9'
        if col in ['Q4', 'V', 'X', 'Z']:
            return 'background-color: #FFFFE0'
        return ''

    def style_func(row):
        year = row.name
        return [color_cells(row[col], year, col) for col in row.index]

    styled = pivot.style.apply(style_func, axis=1)
    styled.set_table_styles([
        {'selector': 'th, td', 'props': [
            ('text-align', 'center'),
            ('min-width', '50px'),
            ('max-width', '70px'),
            ('border', '1px solid #ccc'),
            ('padding', '5px'),
            ('font-family', 'Arial, sans-serif'),
            ('font-size', '12px')
        ]},
        {'selector': 'table', 'props': [
            ('border-collapse', 'collapse'),
            ('margin', '0 auto'),
            ('width', '100%')
        ]}
    ])
    return styled

def create_tab_content(df, all_columns):
    trade_types = ['SPARK_7', 'SPARK_10', 'FP', 'HR', 'GASBASIS']
    dropdown = pn.widgets.Select(name='Trade Type:', options=trade_types, width=200)
    regions = ['NORTH', 'HOUSTON', 'WEST', 'SOUTH']

    def render_table(keyword):
        matching_cols = [col for col in df.columns if keyword in col]
        grouped = {region: [] for region in regions}
        other = []

        for col in matching_cols:
            match = next((r for r in regions if r in col), None)
            if match:
                grouped[match].append(col)
            else:
                other.append(col)

        content = []

        def render_row_group(cols):
            rows = []
            for i in range(0, len(cols), 2):
                row = pn.Row(sizing_mode='fixed', width=2500)

                col1 = cols[i]
                styled1 = create_seasonal_pivot(df, col1)
                title1 = pn.pane.Markdown(f"<div style='text-align:center; font-size:20px; font-weight:600; margin-bottom:10px;'>{col1}</div>")
                table1 = pn.pane.HTML(styled1.render(), width=1200, height=400)
                block1 = pn.Column(title1, table1, width=1200)
                row.append(block1)

                if i + 1 < len(cols):
                    col2 = cols[i + 1]
                    styled2 = create_seasonal_pivot(df, col2)
                    title2 = pn.pane.Markdown(f"<div style='text-align:center; font-size:20px; font-weight:600; margin-bottom:10px;'>{col2}</div>")
                    table2 = pn.pane.HTML(styled2.render(), width=1200, height=400)
                    block2 = pn.Column(title2, table2, width=1200)
                    row.append(block2)

                rows.append(row)
                rows.append(pn.Spacer(height=40))
            return rows

        for region in regions:
            content.extend(render_row_group(grouped[region]))

        if other:
            content.extend(render_row_group(other))

        return pn.Column(*content)

    bound_grid = pn.bind(render_table, dropdown)

    return pn.Column(
        pn.Row(dropdown, width=300, margin=(0, 0, 20, 0)),
        pn.Spacer(height=10),
        bound_grid,
        width=2500
    )

def create_spreads_tab(spread_df):
    spread_types = ['H/N_DA', 'H/N_RT', 'W/N_DA', 'W/N_RT', 'S/N_DA', 'S/N_RT']
    peak_order = ['ATC', 'PEAK', 'OFFPEAK', 'NIGHTS']
    dropdown = pn.widgets.Select(name='Spread Type:', options=spread_types, width=200)
    grid_area = pn.Column(sizing_mode='fixed', width=2500)

    def update_spreads(event=None):
        selected = dropdown.value
        grid_area.clear()

        ordered_cols = []
        for peak in peak_order:
            match = next((col for col in spread_df.columns if selected in col and peak in col), None)
            if match:
                ordered_cols.append(match)

        for i in range(0, len(ordered_cols), 2):
            row = pn.Row(sizing_mode='fixed', width=2500)

            col1 = ordered_cols[i]
            styled1 = create_seasonal_pivot(spread_df, col1)
            title1 = pn.pane.Markdown(f"<div style='text-align:center; font-size:20px; font-weight:600; margin-bottom:10px;'>{col1}</div>")
            table1 = pn.pane.HTML(styled1.render(), width=1200, height=400)
            block1 = pn.Column(title1, table1, width=1200)
            row.append(block1)

            if i + 1 < len(ordered_cols):
                col2 = ordered_cols[i + 1]
                styled2 = create_seasonal_pivot(spread_df, col2)
                title2 = pn.pane.Markdown(f"<div style='text-align:center; font-size:20px; font-weight:600; margin-bottom:10px;'>{col2}</div>")
                table2 = pn.pane.HTML(styled2.render(), width=1200, height=400)
                block2 = pn.Column(title2, table2, width=1200)
                row.append(block2)

            grid_area.append(row)
            grid_area.append(pn.Spacer(height=40))

    dropdown.param.watch(update_spreads, 'value')
    update_spreads()

    return pn.Column(pn.Row(dropdown), pn.Spacer(height=10), grid_area, width=2500)

def generate_price_tracker_tabs(data_dict, column_list, spread_df):
    tabs = []
    for label, df in data_dict.items():
        tabs.append((label.upper(), create_tab_content(df, column_list)))
    tabs.append(("SPREADS", create_spreads_tab(spread_df)))
    return pn.Tabs(*tabs, tabs_location='above', width=2500)

def generate_main_dashboard(price_tracker_tabs, timestamp):
    header_html = """
    <div style="font-size: 48px; font-family: Arial, sans-serif; margin: 20px 0 10px 0; text-align: left;">
        <span style="color: #4285F4;">Y</span>
        <span style="color: #DB4437;">A</span>
        <span style="color: #F4B400;">N</span>
        <span style="color: #0F9D58;">U</span>
        <span style="color: #4285F4;">S</span>
    </div>
    """
    last_updated_html = f"""
    <div style="font-size: 16px; font-family: Arial, sans-serif; margin-bottom: 30px; text-align: left; color: gray;">
        Last updated: {timestamp}
    </div>
    """
    top_level_tabs = pn.Tabs(
        ('Price Tracker', price_tracker_tabs),
        ('Cash', pn.Column(pn.Spacer(height=20), width=2500)),
        ('Seasonal', pn.Column(pn.Spacer(height=20), width=2500)),
        ('Fundamentals', pn.Column(pn.Spacer(height=20), width=2500)),
        tabs_location='above',
        width=2500
    )
    return pn.Column(pn.pane.HTML(header_html), pn.pane.HTML(last_updated_html), top_level_tabs, width=2500)

# Load data
peak_df = pd.read_csv("peak.csv")
offpeak_df = pd.read_csv("offpeak.csv")
nights_df = pd.read_csv("nights.csv")
atc_df = pd.read_csv("atc.csv")
spread_df = pd.read_csv("spreads.csv")

all_columns = ['SPARK1', 'SPARK2', 'FP1', 'HR1', 'GASBASIS1', 'SPARK_7', 'SPARK_10']

dataframes = {
    'Peak': peak_df,
    'Offpeak': offpeak_df,
    'Nights': nights_df,
    'ATC': atc_df
}

timestamp = datetime.now().strftime("%m/%d %H:%M")
price_tracker_tabs = generate_price_tracker_tabs(dataframes, all_columns, spread_df)
dashboard = generate_main_dashboard(price_tracker_tabs, timestamp)
dashboard.save("YANUS.html", embed=True)

print("YANUS dashboard saved as 'YANUS.html'")