import pandas as pd
import matplotlib.pyplot as plt
import re

def plot_contract_with_vintage_overlay(df, contract_col):
    today = df.index.max() - pd.Timedelta(days=1)
    six_months_ago = today - pd.DateOffset(months=6)

    match = re.search(r'([A-Z][a-z]{2})(\d{2})$', contract_col)
    if not match:
        raise ValueError("Contract column must end in 'MonYY' format, e.g., 'Jul25'")
    
    month_str, year_suffix = match.groups()
    base_year = int('20' + year_suffix)

    all_cols = {0: contract_col}
    for offset in range(1, 4):
        prior_year = base_year - offset
        suffix = str(prior_year)[-2:]
        vintage_col = contract_col.replace(f"{month_str}{year_suffix}", f"{month_str}{suffix}")
        if vintage_col in df.columns:
            all_cols[offset] = vintage_col

    plot_df = pd.DataFrame()

    # Step 1: Handle current year (black line)
    if contract_col in df.columns:
        main_data = df[[contract_col]].copy()
        main_data = main_data[~main_data.index.duplicated(keep='first')]
        main_data = main_data.loc[(main_data.index >= six_months_ago) & (main_data.index <= today)]
        main_data = main_data.interpolate(method='time')
        main_data = main_data.loc[main_data.index <= today]  # enforce no values past today
        plot_df[str(base_year)] = main_data[contract_col]

    # Step 2: Handle historical vintages (fully filled to avoid gaps)
    for offset, col in all_cols.items():
        if offset == 0:
            continue
        vintage_start = six_months_ago - pd.DateOffset(years=offset)
        vintage_end = today + pd.DateOffset(months=3) - pd.DateOffset(years=offset)
        vintage_data = df[[col]].loc[vintage_start:vintage_end].copy()
        vintage_data = vintage_data[~vintage_data.index.duplicated(keep='first')]
        vintage_data.index = vintage_data.index + pd.DateOffset(years=offset)
        vintage_data = vintage_data.interpolate(method='time').fillna(method='ffill').fillna(method='bfill')
        vintage_data = vintage_data.loc[~vintage_data.index.duplicated(keep='first')]
        plot_df = plot_df.combine_first(vintage_data.rename(columns={col: str(base_year - offset)}))

    # Step 3: Plot
    plt.figure(figsize=(14, 6))

    # Plot current year thick & black â€” no data past today
    if str(base_year) in plot_df.columns:
        mask = plot_df.index <= today
        plt.plot(plot_df.index[mask].strftime('%m_%d'), plot_df[str(base_year)][mask], color='black', linewidth=2.5, label=str(base_year))

    # Plot historical vintages
    for label in sorted(plot_df.columns, reverse=True):
        if label != str(base_year):
            plt.plot(plot_df.index.strftime('%m_%d'), plot_df[label], label=label, linewidth=1)

    today_str = today.strftime('%m_%d')
    plt.axvline(x=today_str, color='black', linestyle='--', linewidth=1, label='Today')

    plt.xlabel('Date (MM_DD)')
    plt.ylabel('Price')
    plt.title(f'{contract_col} and Historical Vintages')
    plt.legend()
    plt.xticks(rotation=45)
    plt.xticks(ticks=plt.xticks()[0][::max(1, len(plt.xticks()[0]) // 15)])
    plt.tight_layout()
    plt.show()